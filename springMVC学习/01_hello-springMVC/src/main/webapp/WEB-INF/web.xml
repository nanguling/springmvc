<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--声明，注册springmvc核心对象，DispatherServlet
        需要在tomcat服务器启动后就会创建DispatherServlet对象的实例。
        为什么要创建DispatherServlet对象的实例？
            因为DispatherServlet在它的创建过程中会同时创建springmvc这个容器对象，读取springmvc配置文件，把这个配置文件中的对象都创建好。
            当用户发起请求时，就可以直接使用对象了。

        servlet初始化会执行init()方法。DispatherServlet在init()中执行{
            //创建容器，读取配置文件
            WebAppliicationContext stx = new ClassPathXmlAppliacitonContext(springmvc配置文件名称);
            //把容器对象放入到ServletContext中
            getServletContext().setAttribute(key,ctx);
        }

        启动tomcat报错：/WEB-INF/springmvc-servlet.xml
        springmvc创建容器对象时，读取的配置文件默认是/WEB-INF/<servlet-name>springmvc.xml
    -->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--自定义springmvc读取的配置文件的位置-->
        <init-param>
            <!--指定sprigmvc配置文件位置的属性名-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--希望在tomcat启动后就能创建servlet对象
            load-on-startup:表示tomcat在启动后要创建对象的顺序。它的值是一个非负整数，数值越小，tomcat创建对象的时间越早。
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <!--
            使用框架的时候，url-pattern可以使用两种值：
            1.扩展名，语法：*.xxx，xxx是自定义的扩展名。常用的方式是*.do，*。action，&.mvc等等
              http：//localhost：8080/myweb/some.do

            2.使用“/”
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>